openapi: "3.0.1"
info:
  version: "0.1"
  title: "Address Credential Issuer API"

paths:
  /address:
    put:
      parameters:
        - in: header
          name: "session_id"
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
        required: true
      responses:
        200:
          description: "Address saved successfully"
        201:
          description: "Address saved and credential issued"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddressFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /postcode-lookup/{postcode}:
    get:
      parameters:
        - in: path
          name: postcode
          required: true
          description: The postcode to look up
          schema:
            type: string
        - in: header
          name: "session_id"
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostcodeLookupResponse"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostcodeLookupFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /session:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /token:
    parameters:
      - $ref: "#/components/parameters/GrantType"
      - $ref: "#/components/parameters/Code"
      - $ref: "#/components/parameters/RedirectUri"
      - $ref: "#/components/parameters/ClientId"
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRequest"
        required: true
      responses:
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AccessTokenFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /credential/issue:
    summary: Resource for the Address API
    description: >-
      This API is expected to be called by the IPV core backend directly as the
      final part of the OpenId/Oauth Flow
    parameters:
      - name: Authorization
        in: header
        required: true
        description: 'A valid access_token (e.g.: authorization: Bearer access-token-value).'
        schema:
          type: string
    post:
      summary: Post request using a valid access_token
      description: Accepts form encoded param consisting of the access_token and subject

      responses:
        '200':
          description: 200 Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        '400':
          description: 400 Bad Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: 500 Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IssueCredentialFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
components:
  parameters:
    GrantType:
      name: grant_type
      in: query
      required: true
      description: Required value MUST be set to "authorization_code"
      schema:
        type: string
    Code:
      name: code
      in: query
      required: true
      description: The authorization code received from the IPV Core
      schema:
        type: string
    ClientId:
      name: client_id
      in: query
      required: true
      description: Required the value client_id has Maximum of 255 characters.
      schema:
        type: string
    RedirectUri:
      name: redirect_uri
      in: query
      required: true
      description:  Required, and is the "redirect_uri" parameter was included in the authorization request
      schema:
        type: string

  schemas:
    TokenRequest:
      required:
        - "grant_type"
        - "code"
        - "redirect_uri"
        - "client_id"
      type: "object"
      properties:
        grant_type:
          type: "string"
          pattern: "authorization_code"
          example: "authorization_code"
        code:
          type: "string"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://www.example/com/callback"
        client_id:
          type: "string"
          minLength: 1
          example: "ipv-core"
        client_assertion_type:
          type: "string"
          pattern: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
          example: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
        client_assertion:
          type: "string"
          pattern: "[a-zA-Z0-9_=]+\\.[a-zA-Z0-9_=]+\\.[a-zA-Z0-9_\\-\\+\\/=]+"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0dCIsImlhdCI6MTUxNjIzOTAyMn0.SbcN-ywpLObhMbbaMCtW1Un8LYhQzHsEth9LvTk4oQQ"
    TokenResponse:
      title: AccessToken
      required:
        - "access_token"
        - "expires_in"
      type: "object"
      properties:
        access_token:
          type: string
          description: The Access Token for the given token request
        token_type:
          type: string
          description: The Token Type issued
          example: Bearer
        expires_in:
          type: string
          description: The expiry time, in seconds
          example: '3600'
        refresh_token:
          type: string
          description: The refresh token is optional, not currently applicable
    Authorization:
      required:
        - "client_id"
        - "request"
      type: "object"
      properties:
        client_id:
          type: "string"
          minLength: 1
          example: "ipv-core-stub"
        request:
          type: "string"
          pattern: "[a-zA-Z0-9_=]+\\.[a-zA-Z0-9_=]+\\.[a-zA-Z0-9_\\-\\+\\/=]+"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0dCIsImlhdCI6MTUxNjIzOTAyMn0.SbcN-ywpLObhMbbaMCtW1Un8LYhQzHsEth9LvTk4oQQ"
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "981bb74c-3b5e-462e-ba3a-abf868e5da68"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
    Error:
      title: "Error Schema"
      type: "object"
      properties:
        message:
          type: "string"
    Session:
      required:
        - "session_id"
      type: "object"
      properties:
        session_id:
          type: "string"
    PostcodeLookupResponse:
      title: "Postcode Lookup Response"
      type: "array"
      items:
        $ref: "#/components/schemas/CanonicalAddress"
    Address:
      title: "Address Update Request"
      type: "array"
      items:
        $ref: "#/components/schemas/CanonicalAddress"
    CanonicalAddress:
      title: "Canonical Address"
      type: "object"
      properties:
        uprn:
          type: "number"
          example: 1234567890
          description: "Unique Property Reference Number"
        organisationName:
          type: "string"
          example: "Some Organisation"
        departmentName:
          type: "string"
          example: "Some Department"
        subBuildingName:
          type: "string"
          example: "Some Sub Building"
        buildingNumber:
          type: "string"
          example: "1"
        dependentStreetName:
          type: "string"
          example: "Some Street"
        doubleDependentLocality:
          type: "string"
          example: "Some Town"
        dependentLocality:
          type: "string"
          example: "Some Area"
        buildingName:
          type: "string"
          example: "Some Building"
        streetName:
          type: "string"
          example: "Some Street"
        postTown:
          type: "string"
          example: "Some Town"
        postcode:
          type: "string"
          example: "SW1A 1AA"
        countryCode:
          type: "string"
          example: "GBR"
          description: "ISO 3-Letter Country Code"
        residentFrom:
          description: "Date in ISO 8601 format"
          type: "string"
          example: "2020-01-01"
        residentTo:
          description: "Date in ISO 8601 format"
          type: "string"
          example: "2020-01-01"
        currentResidency:
          type: "boolean"
          example: true


#  securitySchemes:
#    api_key:
#      type: "apiKey"
#      name: "x-api-key"
#      in: "header"
#
#security:
#  - api_key: []

x-amazon-apigateway-request-validators:
  Validate both:
    validateRequestBody: true
    validateRequestParameters: true

